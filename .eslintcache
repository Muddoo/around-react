[{"C:\\Users\\zoddo\\around-react\\src\\index.js":"1","C:\\Users\\zoddo\\around-react\\src\\reportWebVitals.js":"2","C:\\Users\\zoddo\\around-react\\src\\components\\App.js":"3","C:\\Users\\zoddo\\around-react\\src\\components\\Header.js":"4","C:\\Users\\zoddo\\around-react\\src\\components\\Main.js":"5","C:\\Users\\zoddo\\around-react\\src\\components\\Footer.js":"6","C:\\Users\\zoddo\\around-react\\src\\components\\PopupWithForm.js":"7","C:\\Users\\zoddo\\around-react\\src\\components\\ImagePopup.js":"8","C:\\Users\\zoddo\\around-react\\src\\utils\\Api.js":"9","C:\\Users\\zoddo\\around-react\\src\\components\\Input.js":"10","C:\\Users\\zoddo\\around-react\\src\\utils\\api.js":"11","C:\\Users\\zoddo\\around-react\\src\\components\\Card.js":"12","C:\\Users\\zoddo\\around-react\\src\\components\\Cards.js":"13","C:\\Users\\zoddo\\around-react\\src\\contexts\\CurrentUserContext.js":"14"},{"size":511,"mtime":1612378343287,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1611135614155,"results":"17","hashOfConfig":"16"},{"size":6420,"mtime":1612412790319,"results":"18","hashOfConfig":"16"},{"size":213,"mtime":1611141538849,"results":"19","hashOfConfig":"16"},{"size":2087,"mtime":1612412725836,"results":"20","hashOfConfig":"16"},{"size":194,"mtime":1611141880065,"results":"21","hashOfConfig":"16"},{"size":2944,"mtime":1612412295075,"results":"22","hashOfConfig":"16"},{"size":742,"mtime":1612412740154,"results":"23","hashOfConfig":"16"},{"size":1270,"mtime":1611247288358,"results":"24","hashOfConfig":"16"},{"size":581,"mtime":1612412734929,"results":"25","hashOfConfig":"16"},{"size":1289,"mtime":1612412067753,"results":"26","hashOfConfig":"16"},{"size":1451,"mtime":1612412762989,"results":"27","hashOfConfig":"16"},{"size":1024,"mtime":1612412166314,"results":"28","hashOfConfig":"16"},{"size":68,"mtime":1612412231038,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1j5csnj",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\zoddo\\around-react\\src\\index.js",[],["65","66"],"C:\\Users\\zoddo\\around-react\\src\\reportWebVitals.js",[],"C:\\Users\\zoddo\\around-react\\src\\components\\App.js",["67"],"import {useState,useEffect} from 'react'\nimport logo from '../images/Vectorlogo.svg'\nimport Header from './Header'\nimport Main from './Main'\nimport Footer from './Footer'\nimport PopupWithForm from './PopupWithForm'\nimport ImagePopup from './ImagePopup'\nimport api from '../utils/api'\nimport CurrentUserContext from '../contexts/CurrentUserContext'\n\nfunction App() {\n    const [currentUser,setCurrentUser] = useState();\n    const [cards,setCards] = useState([]);\n    const [avatarPopup,setAvatarPopup] = useState(false);\n    const [profilePopup,setProfilePopup] = useState(false);\n    const [cardPopup,setCardPopup] = useState(false);\n    const [deletePopup,setDeletePopup] = useState(false);\n    const [imagePopup,setImagePopup] = useState(false);\n    const [selectedCard,setSelectedCard] = useState({});\n\n    useEffect(() => {\n        Promise.all([api.getUser(),api.queryCards({})])\n               .then(data => {\n                   const [user,initialCards] = data;\n                   setCurrentUser(user)\n                   setCards(initialCards)\n               })\n               .catch(err => console.log(err))\n    },[])\n\n    function handleEditAvatarClick(isSubmit) {\n        setAvatarPopup(() => isSubmit);\n    }\n    function handleEditProfileClick(isSubmit) {\n        setProfilePopup(() => isSubmit)\n    }\n    function handleAddPlaceClick(isSubmit) {\n        setCardPopup(() => isSubmit)\n    }\n    function handleCardClick(card) {\n        setImagePopup(true)\n        setSelectedCard(card)\n    }\n    function handleCardDelete(card) {\n        setDeletePopup(true);\n        setSelectedCard(card);\n    }\n    function handleImagePopupClick() {\n        let index = cards.indexOf(selectedCard) + 1;\n        if(index === cards.length) index = 0; \n        setSelectedCard(cards[index])\n    }\n    function onCardUpdate(name, card = selectedCard) {\n        if(name === 'like') {\n            const method = card.likes.some(data => data._id === currentUser._id) ? 'DELETE' : 'PUT';\n            const newLike = method === 'DELETE' ? card.likes.filter(item => item._id !== currentUser._id) : [...card.likes, {_id: currentUser._id}];\n            const newCards = cards.map(item => card._id === item._id ? {...item,likes: newLike} : item);\n            setCards(newCards);\n            api.queryCards({ query: `likes/${card._id}`, method })\n               .catch(err => {\n                   console.log(err);\n                   setCards(cards)\n               })\n        }\n        if(name === 'delete') {\n            const newCards = cards.filter(item => item._id !== card._id);\n            setCards(newCards);\n            api.queryCards({query: card._id, method: 'DELETE'})\n               .catch(err => {\n                  console.log(err);\n                  setCards(cards);\n                })\n                .finally(() => closeAllPopups())\n        }\n        if(name === 'card') {\n            api.queryCards({ method: 'POST', body: card })\n                .then(place => {\n                   setCards([place,...cards]);\n                })\n                .catch(err => console.log(err))\n                .finally(() => closeAllPopups())\n        }\n    }\n    function onUserUpdate(name, field) {\n        if(name === 'profile-info') {\n            api.updateProfile({body: field})\n               .then(user => setCurrentUser(user))\n               .catch(err => console.log(err))\n               .finally(() => closeAllPopups())\n        }\n        if(name === 'profile-photo') {\n            api.updateProfile({ avatar: 'avatar', body: field })\n               .then(user => setCurrentUser(user))\n               .catch(err => console.log(err))\n               .finally(() => closeAllPopups())\n        }\n    }\n    function closeAllPopups() {\n            setAvatarPopup(false);\n            setProfilePopup(false);\n            setCardPopup(false);\n            setDeletePopup(false);\n            setImagePopup(false);\n    }\n    function handleOverlayAndCrossClick(e) {\n        if(e.target.classList.contains('popup') || e.target.classList.contains('popup__close')) closeAllPopups();\n    }\n    function handleImagePopupClick() {\n        const index = cards.indexOf(selectedCard) + 1;\n        if(index === cards.length) return setSelectedCard(cards[0])\n        setSelectedCard(cards[index])\n    }\n\n  return (\n    <div className=\"page\">\n        <CurrentUserContext.Provider value={currentUser}>\n            <Header logo={logo} />\n            <Main \n                cards={cards}\n                onEditAvatar={handleEditAvatarClick}  \n                onEditProfile={handleEditProfileClick}\n                onAddPlace={handleAddPlaceClick}\n                onCardClick={handleCardClick}\n                onCardDelete={handleCardDelete}\n                onCardLike={onCardUpdate}\n            />\n            <Footer />\n            <PopupWithForm \n                title='Change profile picture' \n                name='profile-photo' \n                isOpen={avatarPopup}\n                onClose={handleOverlayAndCrossClick}\n                inputs={[['url','Image link','avatar']]}\n                submitText='Save'\n                submit={onUserUpdate}\n            />\n            <PopupWithForm \n                title='Edit profile' \n                name='profile-info' \n                isOpen={profilePopup}\n                onClose={handleOverlayAndCrossClick}\n                inputs={[['text','Name','name',2,40],['text','About me','about',2,200]]}\n                submitText='Save'\n                submit={onUserUpdate}\n            />\n            <PopupWithForm \n                title='New place' \n                name='card' \n                isOpen={cardPopup}\n                onClose={handleOverlayAndCrossClick}\n                inputs={[['text','Title','name',2,30],['url','Image link','link']]}\n                submitText='Create'\n                submit={onCardUpdate}\n            />\n            <PopupWithForm \n                title='Are you sure?' \n                name='delete' \n                isOpen={deletePopup}\n                onClose={handleOverlayAndCrossClick}\n                submitText='Yes'\n                submit={onCardUpdate}\n            />\n            <ImagePopup \n                isOpen={imagePopup}\n                card={selectedCard}\n                onClose={handleOverlayAndCrossClick}\n                onClick={handleImagePopupClick}\n            />\n        </CurrentUserContext.Provider>\n    </div>\n  );\n}\n\nexport default App;","C:\\Users\\zoddo\\around-react\\src\\components\\Header.js",[],"C:\\Users\\zoddo\\around-react\\src\\components\\Main.js",["68"],"import {useState,useEffect} from 'react'\nimport Cards from './Cards'\nimport api from '../utils/api'\n\nfunction Main(props) {\n    const {onEditAvatar,\n           onEditProfile,\n           onAddPlace,\n           onCardClick,\n           onCardDelete,\n           cardsInfo} = props;\n    const [userId,setUserId] = useState('')\n    const [userName,setUserName] = useState('')\n    const [userDescription,setUserDescription] = useState('')\n    const [userAvatar,setUserAvatar] = useState('')\n    const [originalAvatar,setOriginalAvatar] = useState('')\n    const [cards,setCards] = useState([])\n    const [isLoaded,setIsLoaded] = useState(false)\n    \n    useEffect(() => {\n        Promise.all([api.getUser(),api.queryCards({})])\n               .then(data => {\n                   const [user,initialCards] = data;\n                   setUserId(user._id);\n                   setUserName(user.name);\n                   setUserDescription(user.about);\n                   setUserAvatar(user.avatar);\n                   setCards(initialCards)\n                   cardsInfo(initialCards)\n               })\n               .catch(err => console.log(err))\n    },[])\n\n    function apiAvatar(fields) {\n        if(fields.avatar === userAvatar) return onEditAvatar(false);\n        if(fields.avatar !== userAvatar) setIsLoaded(false);\n        const options = {\n            avatar: 'avatar',\n            body: fields\n        };\n        api.updateProfile(options)\n        .then(({avatar}) => {\n            setUserAvatar(avatar);\n            isLoaded && onEditAvatar(false);\n        })\n        .catch(err => console.log(err));\n    }\n    function apiRemove(card) {\n        const newCards = cards.filter(cardArr => cardArr._id !== card._id);\n            setCards(newCards);\n            const options = {\n            query: card._id,\n            method: 'DELETE'\n            };\n            api.queryCards(options)\n               .then(() => onCardDelete(false))\n               .catch(err => {\n                    console.log(err);\n                    setCards(cards);\n                    onCardDelete(false);\n                });\n    }\n\n    function handleEditAvatar() {\n        onEditAvatar(apiAvatar)\n    }\n    function handleEditProfile() {\n        onEditProfile((fields) => {\n            const options = {body: fields};\n            api.updateProfile(options)\n               .then(user => {\n                        setUserName(user.name);\n                        setUserDescription(user.about);\n                        onEditProfile(false);\n                })\n               .catch(err => console.log(err));\n        })\n    }\n    function handleAddPlace() {\n        onAddPlace((fields) => {\n            const options = {\n                method: 'POST',\n                body: fields\n            };\n            api.queryCards(options)\n               .then(place => {\n                    setCards([place,...cards]);\n                    onAddPlace(false);\n                })\n               .catch(err => console.log(err));\n        })\n    }\n\n    function handleCardDelete(card) {\n        onCardDelete(() => apiRemove(card));\n    }\n\n    function handleCardLike(liked) {\n        const method = isLiked(liked) ? 'DELETE' : 'PUT';\n            const options = {\n                query: `likes/${liked._id}`,\n                method\n            }; \n            api.queryCards(options)\n               .catch(err => {\n                   console.log(err);\n                   setCards(cards)\n                })\n            const newCards = cards.map(card => {\n                const newLikes =  method === 'PUT' ? [...liked.likes,{_id: userId}] : liked.likes.filter(like => like._id !== userId)\n                if(liked._id === card._id) return {...card,likes: newLikes}\n                return card\n            });\n            setCards(newCards) \n    }\n\n    function handleLoadedAvatar() {\n        setIsLoaded(true);\n        setOriginalAvatar(userAvatar);\n    }\n\n    function handleUnloadedAvatar() {\n        if(!originalAvatar) return;\n        apiAvatar({avatar: originalAvatar});\n    }\n\n    function profileShow() {\n        return userName && userDescription && userAvatar && isLoaded && true\n    }\n\n    function isOwner(card) {\n        return card.owner._id === userId\n    }\n\n    function isLiked(card) {\n        return card.likes.some(like => like._id === userId)\n    }\n\n    return (\n        <main>\n            <section className={`profile ${!profileShow() && 'hidden'}`} >\n                <div className=\"profile__wrapper\" onClick={handleEditAvatar}>\n                    <img \n                        src={userAvatar} \n                        draggable=\"false\"  \n                        alt=\"profile image\" \n                        className=\"profile__image\" \n                        onLoad={handleLoadedAvatar}\n                        onError={handleUnloadedAvatar}\n                    />\n                </div>\n                <div className=\"profile__info\">\n                    <h1 className=\"profile__name\">{userName}</h1>\n                    <p className=\"profile__text\">{userDescription}</p>\n                    <button \n                        className=\"profile__edit-button\" \n                        aria-label=\"edit-button\" \n                        type=\"button\" \n                        onClick={handleEditProfile}\n                    />\n                </div>\n                <button \n                    className=\"profile__add-button\" \n                    aria-label=\"close-button\" \n                    type=\"button\" \n                    onClick={handleAddPlace}\n                />\n            </section>\n            <Cards \n                cards={cards} \n                isOwner={isOwner}\n                isLiked={isLiked}\n                onCardClick={onCardClick} \n                onCardDelete={handleCardDelete}\n                onCardLike={handleCardLike}\n                onImageFailure={apiRemove}\n            />\n        </main>\n    )\n}\n\nexport default Main","C:\\Users\\zoddo\\around-react\\src\\components\\Footer.js",[],"C:\\Users\\zoddo\\around-react\\src\\components\\PopupWithForm.js",["69"],"import {useState,useEffect,useRef} from 'react'\nimport Input from './Input'\n\nfunction PopupWithForm(props) {\n    const {name,title,isOpen,onClose,submitText,inputs} = props;\n\n    const form = useRef();\n    const [fields,setFields] = useState({});\n    const [errors,setErrors] = useState({});\n    const [buttonText,setButtonText] = useState(submitText);\n\n    useEffect(() => {\n      if(isOpen) {\n        const fieldsObj = {};\n        const errorObj = {}\n        inputs?.forEach(({name}) => {\n          fieldsObj[name] = '';\n          errorObj[name] = '';\n        })\n        setFields(fieldsObj);\n        setErrors(errorObj);\n        setButtonText(submitText);\n        if(!isOpen && inputs) {\n          const reset = {}\n          inputs.forEach(({name}) => reset[name] = '');\n          setFields(reset);\n        }\n        form.current.focus();\n      }\n    },[isOpen])\n\n    function handleChange(e,name) {\n      setFields({... fields, [name]: e.target.value.trim() ? e.target.value : ''})\n      setErrors({...errors, [name]: e.target.validationMessage})\n    }\n\n    function handleSubmit(e) {\n      e.preventDefault();\n      isOpen(fields);\n      setButtonText('Saving...')\n    }\n\n    function setButtonState() {\n        const isField = Object.values(fields).every(field => field !== '');\n        const isError =  Object.values(errors).some(error => error !== '');\n        return !isField || isError;\n    }\n    \n    return (\n        <div \n          className={`popup popup_${name} ${isOpen && 'visible'}`} \n          onClick={onClose}\n        >\n            <form \n              action=\"#\" \n              className=\"popup__form\"\n              name={name}\n              noValidate\n              onSubmit={handleSubmit}\n            >\n                <button className=\"popup__close\" aria-label=\"close-button\" type=\"button\" />\n                <h3 className=\"popup__header\">{title}</h3>\n                {inputs && inputs.map(({type,placeholder,name,min,max},i) => (\n                  <Input \n                    key={i} \n                    type={type} \n                    placeholder={placeholder} \n                    name={name}\n                    min={min}\n                    max={max}\n                    value={fields[name] || ''}\n                    error={errors[name] || ''}\n                    handleChange={handleChange}\n                  />\n                ))}\n                <button \n                  type=\"submit\" \n                  className={`popup__submit ${setButtonState() && 'inactive'}`}\n                  aria-label=\"submit-button\"\n                  disabled={setButtonState()}\n                  ref={form}\n                >\n                    {buttonText}\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default PopupWithForm","C:\\Users\\zoddo\\around-react\\src\\components\\ImagePopup.js",["70"],"import {useState,useEffect} from 'react'\nfunction ImagePopup(props) {\n    const [last,setLast] = useState('');\n    const {card,onClose,imagePopupClick} = props;\n    \n    useEffect(() => card ? setLast(card) : null);\n    \n\n\n    return (\n        <figure className={`popup popup_figure ${card ? 'visible' : null}`} onClick={onClose}>\n            <div className=\"popup__container\">\n                <img \n                    src={last && last.link} \n                    draggable=\"false\" \n                    alt=\"popup image\" \n                    className=\"popup__image\" \n                    onClick={imagePopupClick}\n                />\n                <p className=\"popup__caption\">{last.name}</p>\n                <button className=\"popup__close popup__close_fig\" aria-label=\"close-button\" type=\"button\" title=\"close\"/>\n            </div>\n        </figure>\n    )\n}\n\nexport default ImagePopup","C:\\Users\\zoddo\\around-react\\src\\utils\\Api.js",[],"C:\\Users\\zoddo\\around-react\\src\\components\\Input.js",[],["71","72"],"C:\\Users\\zoddo\\around-react\\src\\utils\\api.js",[],"C:\\Users\\zoddo\\around-react\\src\\components\\Card.js",["73"],"function Card(props) {\n    const {card,onCardClick,handleReady,onCardDelete,isOwner,isLiked,onCardLike,onImageFailure} = props;\n    return (\n        <div className=\"card\">\n            <img \n                src={card.link} \n                draggable=\"false\" \n                alt=\"card image\" \n                className=\"card__image\" \n                onClick={() => onCardClick(card)}\n                onLoad={handleReady}\n                onError={() => onImageFailure(card)}\n            />\n            <div className=\"card__details\">\n                <h2 className=\"card__text\">{card.name}</h2>\n                <button \n                    className={`card__icon-heart ${isLiked(card) && 'card__icon-heart_black animate'}`}\n                    type=\"button\" \n                    aria-label=\"heart-button\" \n                    title=\"like\"\n                    onClick={() => onCardLike(card)}\n                />\n                <span className=\"card__likes\">{card.likes.length}</span>\n            </div>\n            <button \n                className=\"card__icon-delete\" \n                type=\"button\" \n                aria-label=\"trash-button\" \n                title=\"delete\"\n                onClick={() => onCardDelete(card)}\n                hidden={!isOwner(card)}\n            />\n        </div>\n    )\n}\n\nexport default Card","C:\\Users\\zoddo\\around-react\\src\\components\\Cards.js",[],"C:\\Users\\zoddo\\around-react\\src\\contexts\\CurrentUserContext.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":108,"column":14,"nodeType":"80","messageId":"81","endLine":108,"endColumn":35},{"ruleId":"82","severity":1,"message":"83","line":16,"column":21,"nodeType":"84","endLine":22,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":39,"column":7,"nodeType":"87","endLine":39,"endColumn":20,"suggestions":"88"},{"ruleId":"82","severity":1,"message":"83","line":7,"column":17,"nodeType":"84","endLine":13,"endColumn":19},{"ruleId":"74","replacedBy":"89"},{"ruleId":"76","replacedBy":"90"},{"ruleId":"82","severity":1,"message":"83","line":14,"column":13,"nodeType":"84","endLine":20,"endColumn":15},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-redeclare","'handleImagePopupClick' is already defined.","Identifier","redeclared","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'inputs' and 'name'. Either include them or remove the dependency array.","ArrayExpression",["93"],["91"],["92"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [inputs, isOpen, name, user]",{"range":"96","text":"97"},[1079,1092],"[inputs, isOpen, name, user]"]