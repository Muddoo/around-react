[{"C:\\Users\\zoddo\\around-react\\src\\index.js":"1","C:\\Users\\zoddo\\around-react\\src\\reportWebVitals.js":"2","C:\\Users\\zoddo\\around-react\\src\\components\\App.js":"3","C:\\Users\\zoddo\\around-react\\src\\components\\Header.js":"4","C:\\Users\\zoddo\\around-react\\src\\components\\Main.js":"5","C:\\Users\\zoddo\\around-react\\src\\components\\Footer.js":"6","C:\\Users\\zoddo\\around-react\\src\\components\\PopupWithForm.js":"7","C:\\Users\\zoddo\\around-react\\src\\components\\ImagePopup.js":"8","C:\\Users\\zoddo\\around-react\\src\\utils\\Api.js":"9","C:\\Users\\zoddo\\around-react\\src\\components\\Input.js":"10","C:\\Users\\zoddo\\around-react\\src\\utils\\api.js":"11","C:\\Users\\zoddo\\around-react\\src\\components\\Card.js":"12","C:\\Users\\zoddo\\around-react\\src\\components\\Cards.js":"13"},{"size":511,"mtime":1612378343287,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1611135614155,"results":"16","hashOfConfig":"15"},{"size":3945,"mtime":1612408785137,"results":"17","hashOfConfig":"15"},{"size":213,"mtime":1611141538849,"results":"18","hashOfConfig":"15"},{"size":6719,"mtime":1612408785143,"results":"19","hashOfConfig":"15"},{"size":194,"mtime":1611141880065,"results":"20","hashOfConfig":"15"},{"size":2787,"mtime":1612408785145,"results":"21","hashOfConfig":"15"},{"size":719,"mtime":1612408785142,"results":"22","hashOfConfig":"15"},{"size":1270,"mtime":1611247288358,"results":"23","hashOfConfig":"15"},{"size":602,"mtime":1612408176870,"results":"24","hashOfConfig":"15"},{"size":1289,"mtime":1612408176880,"results":"25","hashOfConfig":"15"},{"size":1341,"mtime":1612408785140,"results":"26","hashOfConfig":"15"},{"size":1024,"mtime":1612408176864,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j5csnj",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\zoddo\\around-react\\src\\index.js",[],"C:\\Users\\zoddo\\around-react\\src\\reportWebVitals.js",[],["59","60"],"C:\\Users\\zoddo\\around-react\\src\\components\\App.js",[],"C:\\Users\\zoddo\\around-react\\src\\components\\Header.js",[],"C:\\Users\\zoddo\\around-react\\src\\components\\Main.js",["61"],"import {useState,useEffect} from 'react'\nimport Cards from './Cards'\nimport api from '../utils/api'\n\nfunction Main(props) {\n    const {onEditAvatar,\n           onEditProfile,\n           onAddPlace,\n           onCardClick,\n           onCardDelete,\n           avatarInfo,\n           profileInfo,\n           newPlace,\n           deletePlace} = props;\n    const [userId,setUserId] = useState('')\n    const [userName,setUserName] = useState('')\n    const [userDescription,setUserDescription] = useState('')\n    const [userAvatar,setUserAvatar] = useState('')\n    const [originalAvatar,setOriginalAvatar] = useState('')\n    const [cards,setCards] = useState([])\n    const [isLoaded,setIsLoaded] = useState(false)\n    const [Liked,setLiked] = useState(false)\n    const [deleteCard,setDeleteCard] = useState(false)\n    const [unLoadedImage,setUnloadedImage] = useState(false)\n    \n    useEffect(() => {\n        Promise.all([api.getUser(),api.queryCards({})])\n               .then(data => {\n                   const [user,initialCards] = data;\n                   setUserId(user._id);\n                   setUserName(user.name);\n                   setUserDescription(user.about);\n                   setUserAvatar(user.avatar);\n                   setCards(initialCards)\n               })\n               .catch(err => console.log(err))\n    },[])\n\n    useEffect(() => {\n        if(avatarInfo) {\n            const options = {\n                avatar: 'avatar',\n                body: avatarInfo\n            };\n            api.updateProfile(options)\n            .then(({avatar}) => {\n                setUserAvatar(avatar);\n                onEditAvatar();\n            })\n            .catch(err => console.log(err));\n        };\n    },[avatarInfo])\n    useEffect(() => {\n        if(profileInfo) {\n            const options = {body: profileInfo};\n            api.updateProfile(options)\n           .then(user => {\n                setUserName(user.name);\n                setUserDescription(user.about);\n                onEditProfile();\n           })\n           .catch(err => console.log(err));\n        };\n    },[profileInfo])\n    useEffect(() => {\n        if(newPlace) {\n            const options = {\n                method: 'POST',\n                body: newPlace\n            };\n            api.queryCards(options)\n            .then(place => {\n                setCards([place,...cards]);\n                onAddPlace();\n            })\n            .catch(err => console.log(err));\n        };\n    },[newPlace])\n    useEffect(() => {\n        if(deletePlace) {\n            const newCards = cards.filter(card => card._id !== deleteCard._id);\n            setCards(newCards);\n            onCardDelete();\n            const options = {\n            query: deleteCard._id,\n            method: 'DELETE'\n            };\n            api.queryCards(options).catch(err => console.log(err));\n        }\n    },[deletePlace])\n    useEffect(() => {\n        if(unLoadedImage) {\n            const newCards = cards.filter(card => card._id !== unLoadedImage._id);\n            setCards(newCards);\n            const options = {\n                query: unLoadedImage._id,\n                method: 'DELETE'\n              };\n            api.queryCards(options).catch(err => console.log(err));\n        }\n    },[unLoadedImage])\n    useEffect(() => {\n        if(Liked) {\n            const method = isLiked(Liked) ? 'DELETE' : 'PUT';\n            const options = {\n                query: `likes/${Liked._id}`,\n                method\n            }; \n            api.queryCards(options)\n            //    .then(res => {\n            //        const newCards = cards.map(card => card._id === res._id ? res : card);\n            //        setCards(newCards)\n            //    })\n               .catch(err => {\n                   console.log(err);\n                   setCards(cards)\n                })\n            const newCards = cards.map(card => {\n                const newLikes =  method === 'PUT' ? [...Liked.likes,{_id: userId}] : Liked.likes.filter(like => like._id !== userId)\n                if(Liked._id === card._id) return {...card,likes: newLikes}\n                return card\n            });\n            setCards(newCards)    \n        }\n    },[Liked])\n\n\n    function handleCardLike(card) {\n        setLiked(card)\n    }\n\n    function handleCardDelete(card) {\n        onCardDelete();\n        setDeleteCard(card);\n    }\n\n    function handleUnloadedImage(card) {\n        setUnloadedImage(card);\n    }\n\n    function handleLoadedAvatar() {\n        setIsLoaded(true);\n        setOriginalAvatar(userAvatar);\n    }\n\n    function handleUnloadedAvatar() {\n        if(!originalAvatar) return;\n        const options = {\n            avatar: 'avatar',\n            body: {avatar: originalAvatar}\n        };\n        api.updateProfile(options)\n        .then(({avatar}) => {\n            setUserAvatar(avatar);\n        })\n        .catch(err => console.log(err));\n    }\n\n    function profileShow() {\n        return userName && userDescription && userAvatar && isLoaded && true\n    }\n\n    function isOwner(card) {\n        return card.owner._id === userId\n    }\n\n    function isLiked(card) {\n        return card.likes.some(like => like._id === userId)\n    }\n\n    return (\n        <main>\n            <section className={`profile ${profileShow() ? null : 'hidden'}`} >\n                <div className=\"profile__wrapper\" onClick={onEditAvatar}>\n                    <img \n                        src={userAvatar} \n                        draggable=\"false\"  \n                        alt=\"profile image\" \n                        className=\"profile__image\" \n                        onLoad={handleLoadedAvatar}\n                        onError={handleUnloadedAvatar}\n                    />\n                </div>\n                <div className=\"profile__info\">\n                    <h1 className=\"profile__name\">{userName}</h1>\n                    <p className=\"profile__text\">{userDescription}</p>\n                    <button \n                        className=\"profile__edit-button\" \n                        aria-label=\"edit-button\" \n                        type=\"button\" \n                        onClick={onEditProfile}\n                    />\n                </div>\n                <button className=\"profile__add-button\" aria-label=\"close-button\" type=\"button\" onClick={onAddPlace} />\n            </section>\n            <Cards \n                cards={cards} \n                userId={userId} \n                isOwner={isOwner}\n                isLiked={isLiked}\n                onCardClick={onCardClick} \n                onCardDelete={handleCardDelete}\n                onCardLike={handleCardLike}\n                onImageFailure={handleUnloadedImage}\n            />\n        </main>\n    )\n}\n\nexport default Main","C:\\Users\\zoddo\\around-react\\src\\components\\Footer.js",[],"C:\\Users\\zoddo\\around-react\\src\\components\\PopupWithForm.js",["62"],"import {useState,useEffect,createRef} from 'react'\nimport Input from './Input'\n\nfunction PopupWithForm(props) {\n    const {name,title,isOpen,onClose,submitText,inputs,submit} = props;\n\n    const form = createRef();\n    const [fields,setFields] = useState({});\n    const [errors,setErrors] = useState({});\n    const [buttonText,setButtonText] = useState(submitText);\n\n    useEffect(() => {\n      if(isOpen) {\n        const fieldsObj = {};\n        const errorObj = {}\n        inputs?.forEach(({name}) => {\n          fieldsObj[name] = '';\n          errorObj[name] = '';\n        })\n        setFields(fieldsObj);\n        setErrors(errorObj);\n        setButtonText(submitText);\n        if(!isOpen && inputs) {\n          const reset = {}\n          inputs.forEach(({name}) => reset[name] = '');\n          setFields(reset);\n        }\n        form.current.focus();\n      }\n    },[isOpen])\n\n    function handleChange(e,name) {\n      setFields({... fields, [name]: e.target.value.trim() ? e.target.value : ''})\n      setErrors({...errors, [name]: e.target.validationMessage})\n    }\n\n    function handleSubmit(e) {\n      e.preventDefault();\n      submit(fields);\n      setButtonText('Saving...')\n    }\n\n    function setButtonState() {\n        const isField = Object.values(fields).every(field => field !== '');\n        const isError =  Object.values(errors).some(error => error !== '');\n        return !isField || isError;\n    }\n    \n    return (\n        <div \n          className={`popup popup_${name} ${isOpen && 'visible'}`} \n          onClick={onClose}\n        >\n            <form \n              action=\"#\" \n              className=\"popup__form\"\n              name={name}\n              noValidate\n              onSubmit={handleSubmit}\n            >\n                <button className=\"popup__close\" aria-label=\"close-button\" type=\"button\" />\n                <h3 className=\"popup__header\">{title}</h3>\n                {inputs && inputs.map(({type,placeholder,name,min,max},i) => (\n                  <Input \n                    key={i} \n                    type={type} \n                    placeholder={placeholder} \n                    name={name}\n                    min={min}\n                    max={max}\n                    value={fields[name] || ''}\n                    error={errors[name] || ''}\n                    handleChange={handleChange}\n                  />\n                ))}\n                <button \n                  type=\"submit\" \n                  className={`popup__submit ${setButtonState() && 'inactive'}`}\n                  aria-label=\"submit-button\"\n                  disabled={setButtonState()}\n                  ref={form}\n                >\n                    {buttonText}\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default PopupWithForm","C:\\Users\\zoddo\\around-react\\src\\components\\ImagePopup.js",["63"],"import {useState,useEffect} from 'react'\nfunction ImagePopup(props) {\n    const [last,setLast] = useState('');\n    const {card,onClose} = props;\n    \n    useEffect(() => card ? setLast(card) : null)\n\n    return (\n        <figure className={`popup popup_figure ${card ? 'visible' : null}`} onClick={onClose}>\n            <div className=\"popup__container\">\n                <img src={last && last.link} draggable=\"false\" alt=\"popup image\" className=\"popup__image\" />\n                <p className=\"popup__caption\">{last.name}</p>\n                <button className=\"popup__close popup__close_fig\" aria-label=\"close-button\" type=\"button\" title=\"close\"/>\n            </div>\n        </figure>\n    )\n}\n\nexport default ImagePopup","C:\\Users\\zoddo\\around-react\\src\\utils\\Api.js",[],"C:\\Users\\zoddo\\around-react\\src\\components\\Input.js",[],"C:\\Users\\zoddo\\around-react\\src\\utils\\api.js",[],"C:\\Users\\zoddo\\around-react\\src\\components\\Card.js",["64"],"function Card(props) {\n    const {card,onCardClick,handleReady,onCardDelete,isOwner,isLiked,onCardLike,onImageFailure} = props;\n    return (\n        <div className=\"card\" data-id={card._id}>\n            <img \n                src={card.link} \n                draggable=\"false\" \n                alt=\"card image\" \n                className=\"card__image\" \n                onClick={() => onCardClick(card)}\n                onLoad={handleReady}\n                onError={() => onImageFailure(card)}\n            />\n            <div className=\"card__details\">\n                <h2 className=\"card__text\">{card.name}</h2>\n                <button \n                    className={`card__icon-heart ${isLiked(card) && 'card__icon-heart_black animate'}`}\n                    type=\"button\" \n                    aria-label=\"heart-button\" \n                    title=\"like\"\n                    onClick={() => onCardLike(card)}\n                />\n                <span className=\"card__likes\">{card.likes.length}</span>\n            </div>\n            <button \n                className=\"card__icon-delete\" \n                type=\"button\" \n                aria-label=\"trash-button\" \n                title=\"delete\"\n                onClick={() => onCardDelete(card)}\n                hidden={!isOwner(card)}\n            />\n        </div>\n    )\n}\n\nexport default Card","C:\\Users\\zoddo\\around-react\\src\\components\\Cards.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":16,"column":21,"nodeType":"71","endLine":22,"endColumn":23},{"ruleId":"72","severity":1,"message":"73","line":39,"column":7,"nodeType":"74","endLine":39,"endColumn":20,"suggestions":"75"},{"ruleId":"69","severity":1,"message":"70","line":7,"column":17,"nodeType":"71","endLine":13,"endColumn":19},{"ruleId":"69","severity":1,"message":"70","line":14,"column":13,"nodeType":"71","endLine":20,"endColumn":15},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'inputs' and 'name'. Either include them or remove the dependency array.","ArrayExpression",["78"],"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [inputs, isOpen, name, user]",{"range":"81","text":"82"},[1079,1092],"[inputs, isOpen, name, user]"]